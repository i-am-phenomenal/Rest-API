The following API's were developed in this project.

Before using any API, it is important to register a user and generate a jwt which should be passed in every subsequent request
We can also use existing users which can be migrated using seeds.exs
-> User can be registered using the API (Post) "/sign_up/"
-> It expects body in the following format 
    %{
            email
            password
            fullName
            age
        }
    It returns a JSON response in the following format 
    %{
            email
            password
            fullName
            age
            inserted_at
            updated_at
        }
    Password is stored in the form of hash value in the database

Once the user is registered, we can login the user using the following API (Post) "/login/"
-> It expects an input in the following format 
    {
        user {
            email
            password
        }
    }

    It uses elixir library guardian for authentication and creating session data. 
    Once the user is authenticated, it generates a JWT which is valid for 1 day. 
    We need to pass this JWT in every request as a header "jwt_token". The token would be then validated and necessary actin wouldbe performed

(Get) "/api/v1/get_all_users/"
This API returns a list of all the users in the users table
Header ->
     jwt_token: JWT token of authentication
     content-type: application/json

It returns a list of JSON structure and every JSON struct has the following structure
    %{
            fullName
            email
            age
            id
            password
            topicsOfInterest {
                topicName
                shortDesc
            }
        }

(Get) "api/v1/get_all_topics/" 
This API returns a list of all the topics in the topics_of_interest resource
Header ->
     jwt_token: JWT token of authentication
     content-type: application/json
It returns a list of JSON structure and every JSON struct has the following structure
    %{
        topicName
        shortDesc
    }

(PUT) "api/v1/update_user/"
This API updates a user record in the users resource
Header ->
     jwt_token: JWT token of authentication
     content-type: application/json
Body -> %{
            email
            password
            age
            fullName
        }
It returns a String respons ewith status code 200 if the user record was updated successfully

(DELETE) "/api/v1/delete_user"
This API deletes a user from the users table
Header ->
     jwt_token: JWT token of authentication
     content-type: application/json
Body -> emailId: email id of the user which has to be deleted
It returns a String respons ewith status code 200 if the user record was updated successfully

(POST) "api/v1/users/topic_of_interest/"
This API adds an association between user and topic_of_interest
Header ->
     jwt_token: JWT token of authentication
     content-type: application/json
Body -> {
    user_id
    topic_id
}
It checks whether the user exists or not. If the user exists, it will add an association between the 2
It returns a JSON response with status code 200 
    {
        userId
        topicId
    }

(GET) "api/v1/user/:user_id/topics_of_interests"
This API gets all the topics of interest for the user with the given userId
Header ->
     jwt_token: JWT token of authentication
     content-type: application/json
It returns a list of JSON response and every JSON has the following structure with a status code of 200 
{
    topicName
    shortDesc
}

(POST) "api/v1/add_topic" 
This API will add a new topic in the topics_of_interests resource
Header ->
     jwt_token: JWT token of authentication
     content-type: application/json
Body -> 
    {
        topicName
        shortDesc
    }
It will return a status code of 200 along with a message saying "New Topics has been added" 


(DELETE) "api/v1/user/remove_topic_of_interest/"
This API deletes an association between user and topic_of_interest
Header ->
     jwt_token: JWT token of authentication
     content-type: application/json
Body -> {
    user_id
    topic_id_or_name
}
It returns a status code of 200 with a message saying "Association between User Id #{userId} and topicId #{topicIdOrName} successfully removed ! "


(GET) "api/v1/event/rsvp_counts/:event_name_or_id"
This API returns a count of users who accepted the event
Header ->
     jwt_token: JWT token of authentication
     content-type: application/json
Query parameter -> Event Name or eventId
It returns a status code of 200 with a JSON response as follows
    %{
            rsvp_count: count
        }

(GET) "api/v1//event/rsvp_cancelled_counts/:event_name_or_id"
This API returns a count of users who rejected the event
Header ->
     jwt_token: JWT token of authentication
     content-type: application/json
Query parameter -> Event Name or eventId
It returns a status code of 200 with a JSON response as follows
    %{
            cancelled_rsvp_count: count
        }


(POST) "api/v1/user/add_user_to_event/"
This API adds an association between user and events resource in the user_event_relationships table
Header ->
     jwt_token: JWT token of authentication
     content-type: application/json
Body -> 
    %{
            email
            eventName
        }
It returns a status code of 200 with a message saying "User has accepted the invite"

(POST) "api/v1/user/remove_user_from_event/" 
This API removes an association between user and events resource from the user_event_relationships table
Header ->
     jwt_token: JWT token of authentication
     content-type: application/json
Body -> 
    %{
            email
            eventName
        }
It returns a status code of 200 along with message saying "User with email Id #{emailId} has been removed from the event !"


(GET) "api/v1/events/users/list/:event_name_or_id"
This API returns a list of users who have accepted the event
Header ->
     jwt_token: JWT token of authentication
     content-type: application/json
Query Parameters -> event_name_or_id
It returns a status code of 200 with a list of JSON and every JSON structure is of the following format
%{
        fullName
        emailId
        age
    }


(GET) "api/v1/events/cancelled_users/list/:event_name_or_id"
This API returns a list of users who have rejected a particular event
Header ->
     jwt_token: JWT token of authentication
     content-type: application/json
Query Parameters -> event_name_or_id
It returns a status code of 200 with a list of JSON and every JSON structure is of the following format
%{
        fullName
        emailId
        age
    }


(GET) "api/v1/user/calendar/:email"
This API returns a list of events which a given user has accepted
Header ->
     jwt_token: JWT token of authentication
     content-type: application/json
Query Parameters -> email (emailId of the user)
It returns a status code of 200 and a list of JSON structure as follows
%{
        events {
            eventName
            eventType
            eventDescription
            eventDate
            eventDuration
            eventHost
            eventLocation
        }
        emailId
    }

(GET) "api/v1/user/my_events/"
This API returns a list of events for the currently logged in user
It checks for the user whose value is stored in session oject using Guardian.Plug.current_resource(conn) and if a user is found, it returns a list of events which the user has accepted
Header ->
     jwt_token: JWT token of authentication
     content-type: application/json
It returns a status code of 200 and a list of JSON structure as follows
%{
        events {
            eventName
            eventType
            eventDescription
            eventDate
            eventDuration
            eventHost
            eventLocation
        }
        emailId
    }

(POST) "api/v1/user/add_event_to_my_list/"
This API adds a relationship between the currently logged in user and an event in the user_events_relationships resource
Header ->
     jwt_token: JWT token of authentication
     content-type: application/json
Once it successfully adds the user and event relationship, it returns a status code of 200 along with a list of event user has accepted
%{
        events {
            eventName
            eventType
            eventDescription
            eventDate
            eventDuration
            eventHost
            eventLocation
        }
        emailId
    }

(GET) "api/v1/user/get_my_topics/"
This API returns a list of topics which the currently logged in user is associated with
Header ->
     jwt_token: JWT token of authentication
     content-type: application/json
It returns a status code of 200 along with a list of JSON structure with the following structure
%{
        topicId
        topicName
        shortDesc
    }

(POST) "api/v1/user/add_topic/:topic_name_or_id"
This API adds a topic association for the currently logged in user
Header ->
     jwt_token: JWT token of authentication
     content-type: application/json
It accepts either a topic name or topic id and upon success, it returns a status code of 200 along with a message saying "Added New Topic for user #{currentUser.fullName}"

ADMIN API's
The admin scope API's have been written using Basic Auth. It means whenever we make a request, we need to pass email Id and password combination so that it generates an authorization token
Once the auth token is generated, we need to add a header in all the subsequent requests called authorization which should be of the following format
authorization - Basic "Token"
The basic auth username and password configuration has been written in config.exs
The current configuration is as follows
username: "admin.email@gmail.com",
password: "admin"

At the time of seeding the data, a user has also been with the following credentials
%{
    fullName: "Admin" 
    email: "admin.email@gmail.com",
    password: "admin",
    age: 30
}


(POST) "api/admin/event/add" 
This API adds an event in the events table
Headers -> 
    content-type: application/json
    authorization: "Basic token" 
Body -> 
    %{
            eventDescription
            eventType
            eventDate
            eventDuration
            eventHost
            eventLocation
            eventName
        }
Once the event is added, it returns a status code of 200 with the following response
%{
        eventDescription
        eventType
        eventDate
        eventDuration
        eventHost
        eventLocation
        eventName
        inserted_at
        updated_at
    }

(GET) "api/admin/event/list"
This API returns a list of all the events in the events table
Headers -> 
    content-type: application/json
    authorization: "Basic token" 

It returns a status code of 200 along with list of JSON structure with the following response
%{
        id
        eventDescription
        eventType
        eventDate
        eventDuration
        eventHost
        eventLocation
        eventName
        inserted_at
        updated_at
    }
